/* 
 *	PearPC
 *	keyboard.cc - keyboardaccess functions for POSIX
 *
 *	Copyright (C) 1999-2004 Stefan Weyergraf (stefan@weyergraf.de)
 *	Copyright (C) 1999-2004 Sebastian Biallas (sb@biallas.net)
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License version 2 as
 *	published by the Free Software Foundation.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program; if not, write to the Free Software
 *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cstdlib>

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>

#include "system/systhread.h"

extern sys_mutex	gX11Mutex;
extern Display *	gX11Display;
extern Window		gX11Window;

#include "system/display.h"
#include "system/keyboard.h"

#define DPRINTF(a...)
//#define DPRINTF(a...) ht_printf(a)

static uint8 x11_key_to_adb_key[256] = {
	// 0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x35,0x12,0x13,0x14,0x15,0x17,0x16,
	0x1a,0x1c,0x19,0x1d,0x1b,0x18,0x33,0x30,0x0c,0x0d,0x0e,0x0f,0x11,0x10,0x20,0x22,
	0x1f,0x23,0x21,0x1e,0x24,0x36,0x00,0x01,0x02,0x03,0x05,0x04,0x26,0x28,0x25,0x29,
	0x27,0x32,0x38,0x2a,0x06,0x07,0x08,0x09,0x0b,0x2d,0x2e,0x2b,0x2f,0x2c,0x38,0x43,
	0x3a,0x31,0xff,0x7a,0x78,0x63,0x76,0x60,0x61,0x62,0x64,0x65,0x6d,0x47,0xff,0x59,
	0x5b,0x5c,0x4e,0x56,0x57,0x58,0x45,0x53,0x54,0x55,0x52,0x41,0xff,0xff,0xff,0x67,
	0x6f,0x73,0x3e,0x74,0x3b,0xff,0x3c,0x77,0x3d,0x79,0x72,0x75,0x4c,0x36,0xff,0xff,
	0x4b,0x37,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};

class X11SystemKeyboard: public SystemKeyboard {
public:
	virtual int getKeybLEDs()
	{
		return 0;
	}

	virtual void setKeybLEDs(int leds)
	{
	}

	virtual bool getEvent(SystemEvent &ev, bool mayBlock)
	{
		if (!gX11Display) return false;
		sys_lock_mutex(gX11Mutex);
		XEvent event;
		XComposeStatus compose;
		KeySym keysym;
		char buffer[4];
		while (1) {
			uint evmask = KeyPressMask | KeyReleaseMask;
			if (mayBlock) {
				XWindowEvent(gX11Display, gX11Window, evmask, &event);
			} else {
				if (!XCheckWindowEvent(gX11Display, gX11Window, evmask, &event))
					break;
			}
			switch (event.type) {
			case KeyRelease: 
				ev.key.keycode = x11_key_to_adb_key[event.xkey.keycode];
				if (ev.key.keycode == KEY_F12) break;
				if ((ev.key.keycode & 0xff) == 0xff) break;
				ev.type = sysevKey;
				ev.key.pressed = false;
				XLookupString((XKeyEvent*)&event, buffer, sizeof buffer, &keysym, &compose);
				ev.key.chr = buffer[0];
				sys_unlock_mutex(gX11Mutex);
				return true;
			case KeyPress:
				ev.key.keycode = x11_key_to_adb_key[event.xkey.keycode];
/*				if (ev.key.keycode == KEY_F12 && mCurMouseX != -1) {
					setClientMouseGrab(!mMouseGrabbed);
					break;
				}*/
				if ((ev.key.keycode & 0xff) == 0xff) break;
				ev.type = sysevKey;
				ev.key.pressed = true;
				ev.key.keycode = x11_key_to_adb_key[event.xkey.keycode];
				XLookupString((XKeyEvent*)&event, buffer, sizeof buffer, &keysym, &compose);
				ev.key.chr = buffer[0];
				sys_unlock_mutex(gX11Mutex);
				return true;
			}
		}
		sys_unlock_mutex(gX11Mutex);
		return false;
	}
};

SystemKeyboard *allocSystemKeyboard()
{
	if (gKeyboard) return gKeyboard;
	if (!gDisplay) {
		fprintf(stderr, "You must call allocSystemDisplay() first\n");
	}
	return new X11SystemKeyboard();
}
