dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/system/types.h)

PACKAGE=pearpc
VERSION=0.1cvs

dnl Check the system.
AC_CANONICAL_SYSTEM

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_ARG_ENABLE(release,
	[  --enable-release        make an optimized build [default=yes]],,enable_release="yes")
AC_ARG_ENABLE(fpo,
	[  --enable-fpo            compile with -fomit-frame-pointer [default=yes]],,enable_fpo="yes")
AC_ARG_ENABLE(profiling,
	[  --enable-profiling      make a profile build (implies debug) [default=no]],,enable_profiling="no")
AC_ARG_ENABLE(debug,
	[  --enable-debug          make a debug build [default=yes]],,enable_debug="yes")
AC_ARG_ENABLE(cpu,
	[  --enable-cpu            choose cpu (generic or jitc_x86) [default=generic]],,enable_cpu="generic")
AC_ARG_ENABLE(gui,
	[  --enable-gui            choose gui (nogui, beos, qt, or win32) [default=nogui]],,enable_gui="nogui")

if test "x$enable_cpu" = "xno"; then
	AC_MSG_ERROR([Scherzkeks.])
fi

if test "x$enable_gui" = "xno"; then
	enable_gui="nogui"
fi

PPC_CFLAGS="-Wall -fsigned-char"
PPC_CXXFLAGS="-Wall -fsigned-char"
PPC_LDADD=""
PPC_LDFLAGS=""

if test "x$enable_release" = "xyes"; then
	PPC_CFLAGS="$CFLAGS $PPC_CFLAGS -O2"
	PPC_CXXFLAGS="$CXXFLAGS $PPC_CXXFLAGS -O2"
else
	PPC_CFLAGS="$PPC_CFLAGS -O0"
	PPC_CXXFLAGS="$PPC_CXXFLAGS -O0"
fi

if test "x$enable_fpo" = "xyes"; then
	PPC_CFLAGS="$PPC_CFLAGS -fomit-frame-pointer"
	PPC_CXXFLAGS="$PPC_CXXFLAGS -fomit-frame-pointer"
fi

if test "x$enable_profiling" = "xyes"; then
dnl	profiling implies debug
	enable_debug = "yes"
	PPC_CFLAGS="$PPC_CFLAGS -pg -g"
	PPC_CXXFLAGS="$PPC_CXXFLAGS -pg -g"
else
	if test "x$enable_debug" = "xyes"; then
		PPC_CFLAGS="$PPC_CFLAGS -g"
		PPC_CXXFLAGS="$PPC_CXXFLAGS -g"
	fi
fi

AM_INIT_AUTOMAKE($PACKAGE,$VERSION,no-define)
AM_CONFIG_HEADER(config.h)

dnl Check OS specifica

AC_CHECK_HEADERS(pthread.h, AC_DEFINE(PTHREAD_HDR, <pthread.h>, [Have pthread.h?]))

NASM_OPTS="-f elf"

AC_PATH_X
AC_PATH_XTRA

dnl LIBS="$LIBS $X_EXTRA_LIBS"

case "$target_os" in
linux*) 
	SYSTEM_DIR=posix
	AC_MSG_RESULT([*** LINUX, building POSIX version. we need pthread.])
	PPC_LDADD="$PPC_LDADD -lpthread"
	NEED_X11=yes
;;
*freebsd*) 
	SYSTEM_DIR=posix
	AC_MSG_RESULT([*** FREEBSD, building native FreeBSD version. we need pthread.])
	PPC_LDFLAGS="$PPC_LDFLAGS -pthread"
	NEED_X11=yes
;;
cygwin*)
	SYSTEM_DIR=win32
	AC_MSG_RESULT([*** CYGWIN, building native Win32 version (no cygwin.dll)])
	PPC_CFLAGS="$PPC_CFLAGS -mno-cygwin"
	PPC_CXXFLAGS="$PPC_CXXFLAGS -mno-cygwin"
        PPC_LDADD="$PPC_LDADD -lgdi32 -lcomdlg32"
	NASM_OPTS="--prefix _ -f gnuwin32"
;;
mingw32*)
        SYSTEM_DIR=win32
	AC_MSG_RESULT([*** MinGW, building native Win32 version])
        PPC_LDADD="$PPC_LDADD -lgdi32 -lcomdlg32"
        NASM_OPTS="--prefix _ -f win32"
;;
beos*)
	SYSTEM_DIR=beos
	echo "*** BEOS, building native BeOS version (no pthread)" 1>&2
        PPC_LDFLAGS="-lbe -lgame"
	PPC_CFLAGS="$PPC_CFLAGS -Wno-multichar"
	PPC_CXXFLAGS="$PPC_CXXFLAGS -Wno-multichar"
;;
*) 
	AC_MSG_WARN([configure: warning: $target_os: unknown target OS, assuming POSIX-compatible...])
	SYSTEM_DIR=posix
	AC_MSG_WARN([*** assuming POSIX OS, we need pthread])
	PPC_LDADD="$PPC_LDADD -lpthread"
	NEED_X11=yes
;;	
esac

AC_DEFINE_UNQUOTED(SYSTEM_TYPES_HDR, "system/$SYSTEM_DIR/types.h", [Location of system/$SYSTEM_DIR/types.h])

case "$enable_cpu" in
jitc_x86*)
	CPU_DIR="cpu_jitc_x86"
;;	
generic*)
	CPU_DIR="cpu_generic"
;;	
*)
	AC_MSG_WARN([configure: warning: $enable_cpu: unknown cpu, using generic...])
	CPU_DIR="cpu_generic"
	enable_cpu="generic"
;;	
esac

AM_CONDITIONAL(USE_CPU_GENERIC, test x$CPU_DIR = xcpu_generic)
AM_CONDITIONAL(USE_CPU_JITC_X86, test x$CPU_DIR = xcpu_jitc_x86)

PPC_CFLAGS="$PPC_CFLAGS -D_FILE_OFFSET_BITS=64 -pipe";
PPC_CXXFLAGS="$PPC_CXXFLAGS -D_FILE_OFFSET_BITS=64 -pipe";

AM_CONDITIONAL(USE_SYSTEM_BEOS, test x$SYSTEM_DIR = xbeos)
AM_CONDITIONAL(USE_SYSTEM_POSIX, test x$SYSTEM_DIR = xposix)
AM_CONDITIONAL(USE_SYSTEM_WIN32, test x$SYSTEM_DIR = xwin32)

dnl Checks for programs.
AC_PROG_RANLIB
AC_PATH_PROGS(MAKE, gmake make, :)
AC_PROG_MAKE_SET
AC_PROG_CPP
AC_PROG_CC
AC_PROG_CXX
AC_PROG_YACC
AM_PROG_LEX
AC_PATH_PROG(AR, ar)
AC_PATH_PROG(AR, gar)

if test "x$enable_cpu" = "jitc_x86"; then
	dnl FIXME: or SYS_DIR=="win32"
	AC_PATH_PROG(NASM, nasm)
	if test "x$NASM" = "x"; then
		AC_MSG_ERROR([*** 'nasm' missing, please install or fix your \$PATH ***])
	fi
fi

if test "x$AR" = "x"; then
	AC_MSG_ERROR([*** 'ar' and 'gar' missing, please install one of them or fix your \$PATH ***])
fi

dnl Check for required functions in -lX11
if test "x$NEED_X11" = "xyes"; then
	AC_CHECK_LIB(X11, XOpenDisplay,
		[
			AC_SUBST(X_CFLAGS)
			PPC_LDADD="$PPC_LDADD -lX11"
			PPC_LDFLAGS="$PPC_LDFLAGS $X_LIBS"
		],
		AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.]),
		$X_LIBS
	)
fi

dnl Checks for libraries.

GUI_DIR="$enable_gui"
case "$enable_gui" in
nogui*)
;;
qt*)
	dnl Check for QTDIR environment variable.
	AC_MSG_CHECKING([whether QTDIR environment variable is set])
	if test "x$QTDIR" = "x"; then
	  AC_MSG_RESULT([no])
	  AC_MSG_ERROR([QTDIR must be properly set.])
	else
	  AC_MSG_RESULT([$QTDIR])
	fi

	dnl Checks for Qt library.
	AC_CACHE_CHECK([for Qt library],
	  ac_qtlib, [
	  for X in qt-mt qt; do
	    if test "x$ac_qtlib" = "x"; then
	      if test -f $QTDIR/lib/lib$X.so -o -f $QTDIR/lib/lib$X.a; then
	        ac_qtlib=$X
	      fi
	    fi
	  done
	])
	if test "x$ac_qtlib" = "x"; then
	  AC_MSG_ERROR([Qt library not found. Maybe QTDIR isn't properly set.])
	fi

	dnl Check for Qt multi-thread support.
	if test "x$ac_qtlib" = "xqt-mt"; then
	  ac_thread="thread"
	fi
	AC_SUBST(ac_thread)

	CFLAGS="$CFLAGS -I$QTDIR/include"
	LIBS="-L$QTDIR/lib -L/usr/X11R6/lib"

	AC_CACHE_CHECK([for Qt library version >= 3.1.1],
	  ac_qtlib_version, [
	  AC_TRY_LINK([#include "qglobal.h"], [
	#if QT_VERSION < 0x030101
	#error Qt library 3.1.1 or greater required.
	#endif
	    ],
	    [
	      ac_qtlib_version="yes"
	      QT_CFLAGS="$CFLAGS"
	      QT_LIBS="-l$ac_qtlib"
	      QT_LDFLAGS="$LIBS"
	    ], [
	      QT_CFLAGS=""
	      QT_LIBS=""
	      QT_LDFLAGS=""
	    ])
	    CFLAGS="$ac_save_CFLAGS"
	    LIBS="$ac_save_LIBS"
	])

	AC_SUBST(QT_CFLAGS)

	dnl A common error message:
dnl	ac_qtdir_errmsg="not found in current PATH. Maybe QT development environment isn't available (qt3-devel)."

	PPC_LDADD="$PPC_LDADD $QT_LIBS"
	PPC_LDFLAGS="$PPC_LDFLAGS $QT_LDFLAGS"
;;
gtk*)
;;
beos*)
;;
win32*)
;;
*)
	AC_MSG_WARN([*** unknown gui: $enable_gui])
	GUI_DIR="nogui"
;;
esac

AM_CONDITIONAL(USE_GUI_QT, test x$GUI_DIR = xqt)
AM_CONDITIONAL(USE_GUI_GTK, test x$GUI_DIR = xgtk)
AM_CONDITIONAL(USE_GUI_BEOS, test x$GUI_DIR = xbeos)
AM_CONDITIONAL(USE_GUI_WIN32, test x$GUI_DIR = xwin32)
AM_CONDITIONAL(USE_GUI_NOGUI, test x$GUI_DIR = xnogui)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([asm/types.h])
AC_CHECK_HEADERS(linux/netlink.h, AC_DEFINE(HAVE_ETHERTAP, 1, [Have TUN/TAP headers?]),,
     [[
     #if HAVE_ASM_TYPES_H
     # include <asm/types.h>
     #endif
     #if HAVE_SYS_SOCKET_H
     # include <sys/socket.h>
     #endif
     ]])

dnl AC_CONFIG_HEADER(config.h)

CFLAGS="$PPC_CFLAGS"
CXXFLAGS="$PPC_CXXFLAGS"

dnl Makefile vars.
AC_SUBST(CPU_DIR)
AC_SUBST(SYSTEM_DIR)
AC_SUBST(GUI_DIR)
AC_SUBST(NASM_OPTS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(PPC_LDADD)
AC_SUBST(PPC_LDFLAGS)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long int, 4)
AC_CHECK_SIZEOF(long long, 8)

#AC_SUBST(PTHREAD_FLAGS)

AC_OUTPUT([
Makefile
scripts/Makefile
src/Makefile
src/cpu_generic/Makefile
src/cpu_jitc_x86/Makefile
src/debug/Makefile
src/io/Makefile
src/io/3c90x/Makefile
src/io/graphic/Makefile
src/io/ide/Makefile
src/io/prom/Makefile
src/io/prom/fs/Makefile
src/io/prom/fs/hfs/Makefile
src/io/prom/fs/hfsplus/Makefile
src/io/pic/Makefile
src/io/pci/Makefile
src/io/cuda/Makefile
src/io/macio/Makefile
src/io/nvram/Makefile
src/io/usb/Makefile
src/system/Makefile
src/system/gui/Makefile
src/system/gui/qt/Makefile
src/system/gui/gtk/Makefile
src/system/gui/beos/Makefile
src/system/gui/win32/Makefile
src/system/gui/nogui/Makefile
src/system/beos/Makefile
src/system/posix/Makefile
src/system/win32/Makefile
src/tools/Makefile
])

AC_MSG_RESULT([])
AC_MSG_RESULT([$0 successful.])
AC_MSG_RESULT([])
AC_MSG_RESULT([=====================])
AC_MSG_RESULT([Configuration summary])
AC_MSG_RESULT([=====================])
AC_MSG_RESULT([])
AC_MSG_RESULT([cpu:                                 $enable_cpu])
AC_MSG_RESULT([gui:                                 $enable_gui])
AC_MSG_RESULT([enable debug:                        $enable_debug])
AC_MSG_RESULT([enable profiling:                    $enable_profiling])
AC_MSG_RESULT([make release build:                  $enable_release])
AC_MSG_RESULT([omit frame pointer:                  $enable_fpo])
AC_MSG_RESULT([final C compiler flags:              $PPC_CFLAGS])
AC_MSG_RESULT([final C++ compiler flags:            $PPC_CXXFLAGS])
AC_MSG_RESULT([final linker flags:                  $PPC_LDFLAGS])
AC_MSG_RESULT([final linker add:                    $PPC_LDADD])
AC_MSG_RESULT([=====================])
