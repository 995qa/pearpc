dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/system/types.h)

PACKAGE=pearpc
VERSION=0.1

dnl Check the system.
AC_CANONICAL_SYSTEM

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_ARG_ENABLE(release,
	[  --enable-release        make an optimized build [default=yes]],,enable_release="yes")
AC_ARG_ENABLE(fpo,
	[  --enable-fpo            compile with -fomit-frame-pointer [default=yes]],,enable_fpo="yes")
AC_ARG_ENABLE(profiling,
	[  --enable-profiling      make a profile build [default=no]],,enable_profiling="no")
AC_ARG_ENABLE(cpu,
	[  --enable-cpu            choose cpu (generic or jitc_x86) (generic [default=generic]],,enable_cpu="generic")
AC_ARG_ENABLE(gui,
	[  --enable-gui            choose gui (nogui, qt, gtk or win32) (generic [default=nogui]],,enable_gui="nogui")

if test "x$enable_cpu" = "xno"; then
	AC_MSG_ERROR([Scherzkeks.])
fi

if test "x$enable_gui" = "xno"; then
	enable_gui="nogui"
fi

if test "x$enable_release" = "xyes"; then
	FLAGS_ALL="-g -O2 -Wall -fsigned-char"
else
	FLAGS_ALL="-g -O0 -Wall -fsigned-char"
fi

if test "x$enable_fpo" = "xyes"; then
	FLAGS_ALL="$FLAGS_ALL -fomit-frame-pointer"
fi

if test "x$enable_profiling" = "xyes"; then
	FLAGS_ALL="$FLAGS_ALL -pg -g"
fi

AM_INIT_AUTOMAKE($PACKAGE,$VERSION,no-define)
AM_CONFIG_HEADER(config.h)

dnl Check OS specifica

NEED_PTHREAD=0
NASM_OPTS="-f elf"

case "$target_os" in
linux*) 
	SYSTEM_DIR=posix
	echo "*** LINUX, building POSIX version. we need pthread." 1>&2
	NEED_PTHREAD=1
        PPC_LDFLAGS="-L/usr/X11/lib -L/usr/X11R6/lib -lX11"
;;
*freebsd*) 
	SYSTEM_DIR=posix
	echo "*** FREEBSD, building native FreeBSD version. we need pthread." 1>&2
	NEED_PTHREAD=1
        PPC_LDFLAGS="-L/usr/X11/lib -L/usr/X11R6/lib -lX11"
;;
cygwin*)
	SYSTEM_DIR=win32
	echo "*** CYGWIN, building native Win32 version (no cygwin.dll)" 1>&2
	FLAGS_ALL="$FLAGS_ALL -mno-cygwin"
        PPC_LDFLAGS="-lgdi32 -lcomdlg32"
	NEED_PTHREAD=0
	NASM_OPTS="--prefix _ -f gnuwin32"
;;
*) 
	echo "configure: warning: $target_os: unknown target OS, assuming POSIX-compatible..." 1>&2
	SYSTEM_DIR=posix
	echo "*** assuming POSIX OS, we need pthread" 1>&2
	PTHREAD=1
        PPC_LDFLAGS="-L/usr/X11/lib -L/usr/X11R6/lib -lX11"
;;	
esac

case "$enable_cpu" in
jitc_x86*)
	CPU_DIR="cpu_jitc_x86"
;;	
generic*)
	CPU_DIR="cpu_generic"
;;	
*)
	echo "configure: warning: $enable_cpu: unknown cpu, using generic..." 1>&2
	CPU_DIR="cpu_generic"
;;	
esac

AM_CONDITIONAL(USE_CPU_GENERIC, test x$CPU_DIR = xcpu_generic)
AM_CONDITIONAL(USE_CPU_JITC_X86, test x$CPU_DIR = xcpu_jitc_x86)

FLAGS_ALL="-D_FILE_OFFSET_BITS=64 -pipe $FLAGS_ALL";

CXXFLAGS="$FLAGS_ALL"
CFLAGS="$FLAGS_ALL"

AM_CONDITIONAL(USE_SYSTEM_POSIX, test x$SYSTEM_DIR = xposix)
AM_CONDITIONAL(USE_SYSTEM_DJGPP, test x$SYSTEM_DIR = xdjgpp)
AM_CONDITIONAL(USE_SYSTEM_WIN32, test x$SYSTEM_DIR = xwin32)

dnl Checks for programs.
AC_PROG_RANLIB
AC_PATH_PROGS(MAKE, gmake make, :)
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_CXX
AC_PROG_YACC
AM_PROG_LEX
AC_PATH_PROG(AR, ar)
AC_PATH_PROG(AR, gar)

if test "x$enable_cpu" = "jitc_x86"; then
	dnl FIXME: or SYS_DIR=="win32"
	AC_PATH_PROG(NASM, nasm)
	if test "x$NASM" = "x"; then
		AC_MSG_ERROR([*** 'nasm' missing, please install or fix your \$PATH ***])
	fi
fi

if test "x$AR" = "x"; then
	AC_MSG_ERROR([*** 'ar' and 'gar' missing, please install one of them or fix your \$PATH ***])
fi

dnl Checks for libraries.
GUI_DIR="$enable_gui"
case "$enable_gui" in
nogui*)
;;
qt*)
	dnl Check for QTDIR environment variable.
	AC_MSG_CHECKING([whether QTDIR environment variable is set])
	if test "x$QTDIR" = "x"; then
	  AC_MSG_RESULT([no])
	  AC_MSG_ERROR([QTDIR must be properly set.])
	else
	  AC_MSG_RESULT([$QTDIR])
	fi

	dnl Checks for Qt library.
	AC_CACHE_CHECK([for Qt library],
	  ac_qtlib, [
	  for X in qt-mt qt; do
	    if test "x$ac_qtlib" = "x"; then
	      if test -f $QTDIR/lib/lib$X.so -o -f $QTDIR/lib/lib$X.a; then
	        ac_qtlib=$X
	      fi
	    fi
	  done
	])
	if test "x$ac_qtlib" = "x"; then
	  AC_MSG_ERROR([Qt library not found. Maybe QTDIR isn't properly set.])
	fi

	dnl Check for Qt multi-thread support.
	if test "x$ac_qtlib" = "xqt-mt"; then
	  ac_thread="thread"
	fi
	AC_SUBST(ac_thread)

	CFLAGS="$CFLAGS -I$QTDIR/include"
	LIBS="-L$QTDIR/lib -L/usr/X11R6/lib"

	AC_CACHE_CHECK([for Qt library version >= 3.1.1],
	  ac_qtlib_version, [
	  AC_TRY_LINK([#include "qglobal.h"], [
	#if QT_VERSION < 0x030101
	#error Qt library 3.1.1 or greater required.
	#endif
	    ],
	    [
	      ac_qtlib_version="yes"
	      QT_CFLAGS="$CFLAGS"
	      QT_LIBS="$LIBS"
	      QT_LDFLAGS="-l$ac_qtlib"
	    ], [
	      QT_CFLAGS=""
	      QT_LIBS=""
	      QT_LDFLAGS=""
	    ])
	    CFLAGS="$ac_save_CFLAGS"
	    LIBS="$ac_save_LIBS"
	])

	AC_SUBST(QT_CFLAGS)
	AC_SUBST(QT_LIBS)
	AC_SUBST(QT_LDFLAGS)

	dnl A common error message:
	ac_qtdir_errmsg="not found in current PATH. Maybe QT development environment isn't available (qt3-devel)."
	
;;
gtk*)
;;
win32*)
;;
*)
	echo "*** unknown gui: $enable_gui" 1>&2
	GUI_DIR="nogui"
;;
esac


AM_CONDITIONAL(USE_GUI_QT, test x$GUI_DIR = xqt)
AM_CONDITIONAL(USE_GUI_GTK, test x$GUI_DIR = xgtk)
AM_CONDITIONAL(USE_GUI_WIN32, test x$GUI_DIR = xwin32)
AM_CONDITIONAL(USE_GUI_NOGUI, test x$GUI_DIR = xnogui)


dnl Checks for header files.
AC_HEADER_STDC

dnl AC_CONFIG_HEADER(config.h)
PTHREAD_LIB=
if test "x$NEED_PTHREAD" = "x1"; then
	AC_CHECK_HEADERS(pthread.h, AC_DEFINE(PTHREAD_HDR, <pthread.h>, [Have pthread.h?]) PTHREAD_LIB=pthread)
	PPC_LIBS="$PPC_LIBS -l$PTHREAD_LIB $QT_LIBS $QT_LDFLAGS"
fi    

dnl Makefile vars.
PPC_LDFLAGS="$PPC_LIBS $PPC_LDFLAGS"
AC_SUBST(CPU_DIR)
AC_SUBST(SYSTEM_DIR)
AC_SUBST(GUI_DIR)
AC_SUBST(PPC_LDFLAGS)
AC_SUBST(NASM_OPTS)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long int, 4)
AC_CHECK_SIZEOF(long long, 8)

AC_OUTPUT([
Makefile
scripts/Makefile
src/Makefile
src/cpu_generic/Makefile
src/cpu_jitc_x86/Makefile
src/debug/Makefile
src/io/Makefile
src/io/3c90x/Makefile
src/io/graphic/Makefile
src/io/ide/Makefile
src/io/prom/Makefile
src/io/prom/fs/Makefile
src/io/prom/fs/hfs/Makefile
src/io/prom/fs/hfsplus/Makefile
src/io/pic/Makefile
src/io/pci/Makefile
src/io/cuda/Makefile
src/io/macio/Makefile
src/io/nvram/Makefile
src/io/usb/Makefile
src/system/Makefile
src/system/gui/Makefile
src/system/gui/qt/Makefile
src/system/gui/gtk/Makefile
src/system/gui/win32/Makefile
src/system/gui/nogui/Makefile
src/system/posix/Makefile
src/system/win32/Makefile
src/tools/Makefile
])

echo 1>&2
echo "$0 successful." 1>&2
echo 1>&2
echo "=====================" 1>&2
echo "Configuration summary" 1>&2
echo "=====================" 1>&2
echo 1>&2
echo "cpu:                                 $enable_cpu" 1>&2
echo "gui:                                 $enable_gui" 1>&2
echo "enable profiling:                    $enable_profiling" 1>&2
echo "make an optimized build:             $enable_release" 1>&2
echo "omit frame pointer:                  $enable_fpo" 1>&2
echo "=====================" 1>&2
